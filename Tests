import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Optional;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class LuserControllerTest {

    @Mock
    private LuserService luserService;

    @InjectMocks
    private LuserController luserController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void shouldGetAllUsers() {
        // Arrange
        Iuser user1 = new Iuser(1, "Sreeja", "sree", "123", "sree@gmail.com");
        Iuser user2 = new Iuser(2, "Satya", "satya", "123", "satya@gmail.com");

        when(luserService.getAllUsers()).thenReturn(List.of(user1, user2));

        // Act
        ResponseEntity<Iterable<Iuser>> response = luserController.getAllUsers();

        // Assert
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isNotNull();
        assertThat(((List<Iuser>) response.getBody()).size()).isEqualTo(2);
    }

    @Test
    void shouldGetUserById() {
        // Arrange
        Iuser user = new Iuser(1, "Sreeja", "sree", "123", "sree@gmail.com");

        when(luserService.getUserById(1)).thenReturn(Optional.of(user));

        // Act
        ResponseEntity<Iuser> response = luserController.getUserById(1);

        // Assert
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getName()).isEqualTo("Sreeja");
    }

    @Test
    void shouldThrowUserNotFoundExceptionWhenUserByIdIsNotFound() {
        // Arrange
        when(luserService.getUserById(1)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(UserNotFoundException.class, () -> luserController.getUserById(1));
    }

    @Test
    void shouldAddNewUser() {
        // Arrange
        IuserDTO userDto = new IuserDTO("Sreeja", "sree", "123", "sree@gmail.com");
        Iuser savedUser = new Iuser(1, "Sreeja", "sree", "123", "sree@gmail.com");

        when(luserService.addNewUser(userDto)).thenReturn(savedUser);

        // Act
        ResponseEntity<Iuser> response = luserController.addNewUser(userDto);

        // Assert
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getUsername()).isEqualTo("sree");
    }

    @Test
    void shouldUpdateUserById() {
        // Arrange
        IuserDTO userDto = new IuserDTO("Sreeja", "sree", "123", "sree@gmail.com");
        Iuser existingUser = new Iuser(1, "Sreeja", "sree", "123", "sree@gmail.com");
        Iuser updatedUser = new Iuser(1, "Sreeja", "sree", "12345", "sree@gmail.com");

        when(luserService.getUserById(1)).thenReturn(Optional.of(existingUser));
        when(luserService.updateUserById(userDto)).thenReturn(updatedUser);

        // Act
        ResponseEntity<Iuser> response = luserController.updateUserById(userDto);

        // Assert
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getPassword()).isEqualTo("12345");
    }

    @Test
    void shouldThrowUserNotFoundExceptionWhenUpdateUserByIdIsNotFound() {
        // Arrange
        IuserDTO userDto = new IuserDTO("Sreeja", "sree", "123", "sree@gmail.com");

        when(luserService.getUserById(1)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(UserNotFoundException.class, () -> luserController.updateUserById(userDto));
    }

    @Test
    void shouldDeleteUserById() {
        // Arrange
        Iuser existingUser = new Iuser(1, "Sreeja", "sree", "123", "sree@gmail.com");

        when(luserService.getUserById(1)).thenReturn(Optional.of(existingUser));
        doNothing().when(luserService).deleteUserById(1);

        // Act
        ResponseEntity<Object> response = luserController.deleteUserById(1);

        // Assert
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);
        verify(luserService, times(1)).deleteUserById(1);
    }

    @Test
    void shouldThrowUserNotFoundExceptionWhenDeleteUserByIdIsNotFound() {
        // Arrange
        when(luserService.getUserById(1)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(UserNotFoundException.class, () -> luserController.deleteUserById(1));
    }

    @Test
    void shouldGetUserByName() {
        // Arrange
        Iuser user = new Iuser(1, "Sreeja", "sree", "123", "sree@gmail.com");

        when(luserService.getUserByName("sree")).thenReturn(Optional.of(user));

        // Act
        ResponseEntity<Iuser> response = luserController.getUserByName("sree");

        // Assert
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getUsername()).isEqualTo("sree");
    }

    @Test
    void shouldThrowUserNotFoundExceptionWhenUserByNameIsNotFound() {
        // Arrange
        when(luserService.getUserByName("sree")).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(UserNotFoundException.class, () -> luserController.getUserByName("sree"));
    }

    @Test
    void shouldGetUserByEmail() {
        // Arrange
        Iuser user = new Iuser(1, "Sreeja", "sree", "123", "sree@gmail.com");

        when(luserService.getUserByEmail("sree@gmail.com")).thenReturn(Optional.of(user));

        // Act
        ResponseEntity<Iuser> response = luserController.getUserByEmail("sree@gmail.com");

        // Assert
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getEmail()).isEqualTo("sree@gmail.com");
    }

    @Test
    void shouldThrowUserNotFoundExceptionWhenUserByEmailIsNotFound() {
        // Arrange
        when(luserService.getUserByEmail("sree@gmail.com")).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(UserNotFoundException.class, () -> luserController.getUserByEmail("sree@gmail.com"));
    }
}
